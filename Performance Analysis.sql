/*****************************************************************************************************************
NAME:    6.4 Performance Analysis
PURPOSE: Learn performance analysis, execution plans, and indexes in SQL Server...

MODIFICATION LOG:
Ver      Date        Author        Description
-----   ----------   -----------   -------------------------------------------------------------------------------
1.0     10/27/2022   DLISBOA       1. Built this script for EC IT440


RUNTIME: 
0s

NOTES: 
This is where I talk about what this script is, why I built it, and other stuff...
 
******************************************************************************************************************/

-- Generating a Poorly Performing Query

-- Step 1: Query a table in My AdventureWorks2019 SQL Server Database.
-- I´ll use the Sales.SalesOrderHeader table.

SELECT * FROM Person.Person
WHERE LastName = 'Smith'  -- Assuming Name is not indexed

-- Step 3: Include the Actual Execution Plan.

-- To include the Actual Execution Plan in SQL Server Management Studio (SSMS):


-- Step 4: Review the execution plan.

-- After running the query, review the execution plan displayed in the “Execution Plan”


-- Step 5: Take note of the estimated subtree cost and any missing index recommendations.

-- Look for any missing index recommendations in the execution plan. The estimated subtree cost will be displayed in the execution plan details.


-- Step 6: Right-click on the missing index recommendation and select “Missing Index Details”.

-- This will generate a script for creating the recommended index.


-- Step 7: To use the recommended index, name the index and execute the script.
CREATE INDEX IX_Person_LastName ON Person.Person(LastName);




-- Explore and experiment with performance monitoring with SQL Server Profiler.

-- What are some use cases for SQL Server Profiler?
-- What are the major steps you need to follow to use SQL Server Profiler?

--SQL Server Profiler is a powerful tool for monitoring and analyzing SQL Server events. Here’s a quick guide on how to use it:

--Use Cases for SQL Server Profiler
--Diagnosing Slow Queries: Identify and troubleshoot slow-running queries.
--Monitoring SQL Server Performance: Track and analyze SQL Server performance metrics.
--Auditing SQL Server Activity: Capture and review SQL Server activity for security and compliance.
--Debugging Applications: Trace the SQL statements generated by applications to debug issues.